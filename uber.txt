			
			Uber.csv

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv("uber.csv")
df = pd.DataFrame(data)
df

df.copy()


df.head()


df.shape


df.info()


df.describe()


df.columns


df.isnull()


df.isnull().sum()


df.dropna(inplace=True)


df.isnull().sum()


df.corr()


plt.boxplot(x = df['fare_amount'])


q_low = df['fare_amount'].quantile(0.01)
q_high = df['fare_amount'].quantile(0.99)
df = df[(df['fare_amount']<q_high) & (df['fare_amount']>q_low)]


df.isnull().sum()


from sklearn.model_selection import train_test_split
x = df.drop('fare_amount', axis = 1)
y = df['fare_amount']


x['pickup_datetime'] = pd.to_numeric(pd.to_datetime(x['pickup_datetime']))
x = x.loc[:, x.columns.str.contains('^Unnamed')]



x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=42)



from sklearn.linear_model import LinearRegression
lrmodel = LinearRegression()
lrmodel.fit(x_train, y_train)



pre = lrmodel.predict(x_test)
pre



plt.scatter(x_train, y_train, color= "red")
plt.plot(x_test, lrmodel.predict(x_test), color="green")
plt.show()



from sklearn.metrics import mean_squared_error
modelrmse = np.sqrt(mean_squared_error(pre, y_test))
print("RMSE error for the model is ", modelrmse)



from sklearn.ensemble import RandomForestRegressor
rfmodel = RandomForestRegressor(n_estimators = 100, random_state = 101)




rfmodel.fit(x_train, y_train)



rfmodel_pred = rfmodel.predict(x_test)
rfmodel_pred



plt.scatter(x_train, y_train, color= "red")
plt.plot(x_test, rfmodel.predict(x_test), color="green")
plt.show()



rfmodel_rmse = np.sqrt(mean_squared_error(rfmodel_pred, y_test))

print("RMSE error for Random Forest is ", rfmodel_rmse)





